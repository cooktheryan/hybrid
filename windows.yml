- hosts: masters
  gather_facts: no
  tasks:
  - name: Restart atomic-openshift-master-controllers.service
    shell: systemctl restart atomic-openshift-master-controllers.service
  - name: Restart atomic-openshift-master-api.service
    shell: systemctl restart atomic-openshift-master-api.service
  - name: Wait for clean restart
    pause:
       minutes: 2
- hosts: windows
  gather_facts: no
  vars:
     user: "{{lookup('env','USER')}}"
  tasks:
  - name: set up environment
    shell: ln -f -s -n /etc/origin/ openshift.local.config
    args:
       chdir: /etc/origin
    delegate_to: master1
  - name: Create Config
    shell: oc adm create-node-config --hostnames={{inventory_hostname}} --node={{inventory_hostname}} --node-dir=/etc/origin/generated-configs/{{inventory_hostname}}
    args:
        chdir: /etc/origin/
    delegate_to: master1
  - name: Create archives per host
    archive:
       path: /etc/origin/generated-configs/{{inventory_hostname}}/*
       dest: /etc/origin/generated-configs/{{inventory_hostname}}.tgz
    delegate_to: master1
- hosts: master1
  become: yes
  become_user: root
  tasks:
  - name: Create a archive of the node configs
    archive:
       path: /etc/origin/generated-configs/*
       dest:  /etc/origin/generated-configs.tgz
       mode:  666
  - name: Move the configs to bastion
    fetch:
       src:  /etc/origin/generated-configs.tgz
       dest:  /tmp/
       flat: yes
       become: yes
  - name: Create the ovn scc account
    shell: oc create serviceaccount ovn
    ignore_errors: yes
  - name: add scc privileged for ovn
    shell: oc adm policy add-scc-to-user privileged -z ovn
  - name: Add the cluster role
    shell: oc adm policy add-cluster-role-to-user cluster-admin -z ovn
  - name: Save the token for later usage
    shell: oc sa get-token ovn
    register: ovn_key
  - local_action: copy content={{ ovn_key.stdout }} dest=/root/ovn.token
- hosts: 127.0.0.1
  connection: local
  sudo: yes
  gather_facts: no
  vars:
     user: "{{lookup('env','USER')}}"
  tasks:
  - debug: msg="User is {{ user }}"
  - name: Enable Pip
    shell: yum-config-manager --enable epel
  - name: Install PIP and Related
    shell: yum install -y python-pip
  - name: disable epel
    shell: yum-config-manager --disable epel
  - name: Install PIP and Related
    shell: yum install -y gcc libffi-devel python-devel krb5-devel krb5-libs krb5-workstation
  - name: Install pywinrm
    shell: pip install "pywinrm" --upgrade --force
  - name: Install pywinrm keberos
    shell: pip install pywinrm[kerberos]
  - name: Setup local origin structure
    file:
          path: /etc/origin/generated-configs
          state: directory
  - name: Extract configs
    unarchive:
       src: /tmp/generated-configs.tgz
       dest: /etc/origin/generated-configs
  - name: Fix the access mode
    file:
      path: /etc/origin/generated-configs
      owner: "{{user}}"
      recurse: yes
  - name: Create windows directory for master1node files
    file:
         path: /etc/origin/generated-configs/node-master1/windows
         state: directory
  - name: Fix system-node kubconfig
    copy:
       src: /etc/origin/generated-configs/node-master1/system:node:master1.kubeconfig
       dest: /etc/origin/generated-configs/node-master1/windows/system-node-master1.kubeconfig
       force: yes
  - name: Fix system-node crt
    copy:
       src: /etc/origin/generated-configs/node-master1/system:node:master1.crt
       dest: /etc/origin/generated-configs/node-master1/windows/system-node-master1.crt
       force: yes
  - name: Fix system-node key
    copy:
       src: /etc/origin/generated-configs/node-master1/system:node:master1.key
       dest: /etc/origin/generated-configs/node-master1/windows/system-node-master1.key
       force: yes
- hosts: windows
  gather_facts: no
  vars:
     user: "{{lookup('env','USER')}}"
  tasks:
  - name: Set up the GUID for openvswitch
    win_shell: "$GUID = (New-Guid).Guid; Write-Output $GUID"
    register: guid
  - debug: msg="GUID is {{ guid.stdout }}"
  - name: create a schedule task
    win_scheduled_task:
      name: ovnsetguid
      description: Set OVN System Guid
      executable: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
      arguments: -ExecutionPolicy Unrestricted -NonInteractive ovs-vsctl set Open_vSwitch . external_ids:system-id="{{ guid.stdout | trim  }}"
      frequency: once
      enabled:   true
      time:      "14:00:00"
  - name: Run the schedule task
    win_shell: Start-ScheduledTask -TaskName ovnsetguid
  - name: Pull the kubernetes client
    win_shell: wget.exe --no-check-certificate https://dl.k8s.io/v1.9.8/kubernetes-node-windows-amd64.tar.gz -O C:\Windows\Temp\kubernetes.tar.gz
  - name: Unzip kubernetes
    win_shell: 7z x -aoa C:\Windows\Temp\kubernetes.tar.gz -o\Windows\Temp
  - name: Untar kubernetes
    win_shell: 7z x -aoa c:\Windows\Temp\kubernetes.tar -o\Windows\Temp
  - name: Move the kube to bin
    win_shell: copy "C:\Windows\Temp\kubernetes\node\bin\*" C:\bin
  - name: Mkdir \k
    win_file:
       path: C:\k
       state: directory
       ignore_errors: yes

  - name: move the node files
    win_copy:
      src: /etc/origin/generated-configs/{{inventory_hostname}}.tgz
      dest: c:\k\{{inventory_hostname}}.tgz
      force: yes
  - name: Unzip the config files
    win_shell: 7z x -aoa /k/{{inventory_hostname}}.tgz  -o\k\
  - name: Unarchvie the config files
    win_shell: 7z x -aoa /k/etc/origin/generated-configs/{{inventory_hostname}}.tgz -o/k
  - name: Add the master1 cluster config file
    win_copy:
       src: /etc/origin/generated-configs/node-master1/windows/
       dest: /k/
       force: yes
  - name: Cleanup archive path
    win_file:
       path: c:\k\etc
       state: absent
  - name: Setup client config
    win_copy:
       src: "/root/.kube/config"
       dest: /k/config
       force: yes
  - name: Set kubeconfig
    win_shell: "[System.Environment]::SetEnvironmentVariable('KUBECONFIG', 'c:/k/config;c:/k/system-node-master1.kubeconfig', [System.EnvironmentVariableTarget]::Machine)"
  - name: Set kubeconfig
    win_shell: "[System.Environment]::SetEnvironmentVariable('KUBECONFIG', 'c:/k/config;c:/k/system-node-master1.kubeconfig')"
  - name: Install the hyperV Network Tools
    win_shell: "Install-WindowsFeature -Name RSAT-Hyper-V-Tools"
  - name: Enable Hyper-V Features
    win_shell: "Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All"
  - name: Pull down hybrid directoy
    win_shell: git clone https://github.com/glennswest/hybrid.git c:\k\hybrid
    ignore_errors: yes
  - name: Build the pause windows container
    win_shell: docker build . -t kubeletwin/pause
    args:
      chdir: c:\k\hybrid
# Network setup
- hosts: windows
  gather_facts: no
  tasks:
  - name: Expand System Disk
    win_shell: expanddisk.ps1
    args:
      chdir: c:\k\hybrid\bin
  - name: Setup Docker network
    win_shell: docker-create.ps1
    args:
      chdir: c:\k\hybrid\bin
  - name: Setup SDN
    win_shell: setup-network.ps1
    args:
      chdir: c:\k\hybrid\bin
  - name: Pause for sdn setup
    pause:
       minutes: 2    
# Part 2
- hosts: master1
  become: yes
  become_user: root
  tasks:
  - name: Get the ovn_k8s.conf
    fetch:
          src: /etc/openvswitch/ovn_k8s.conf
          dest: "{{playbook_dir}}/"
          flat: yes
- hosts: windows
  tasks:
  - name: Create the master directory
    file: path="{{playbook_dir}}/{{ ansible_hostname }}" state=directory
    delegate_to: localhost
  - name: Create ovn_k8s.conf
    blockinfile:
      dest: "{{playbook_dir}}/{{ ansible_hostname }}/ovn_k8s.conf"
      create: yes
      block: |
         [default]
         encap-ip="{{lookup('dig',"{{ ansible_hostname }}")}}"

         [kubernetes]
         apiserver="{{lookup('file', '{{playbook_dir}}/api_host.txt')}}"  # kubernetes api server, or the load balanced address for the multiple api server case
         token="{{lookup('file', '{{playbook_dir}}/ovn.token')}}"
         cacert=/k/ca.crt

         [ovnnorth]
         address="tcp://{{lookup('dig','master1')}}:6641" # this master machine's IP address

         [ovnsouth]
         address="tcp://{{lookup('dig','master1')}}:6642"

    delegate_to: localhost
- hosts: windows
  gather_facts: no
  tasks:
  - name: Mkdir \cni
    win_file:
       path: C:\cni
       state: directory
       ignore_errors: yes
  - name: Create 10-ovn-kubernetes.conf
    win_copy:
       dest: c:\cni\10-ovn-kubernetes.conf
       force: yes
       content: |
        {"cniVersion":"0.3.1","name":"ovn-kubernetes","type":"ovn-k8s-cni-overlay","ipam":{},"dns":{}}

  - name: Copy ovn_k8s.conf to cni directory
    win_copy:
       src: "{{playbook_dir}}/{{ansible_hostname}}/ovn_k8s.conf"
       dest: C:\cni\ovn_k8s.conf
       force: yes
  - name: Copy ovn_k8s.conf to windows nodes
    win_copy:
       src: "{{playbook_dir}}/{{ansible_hostname}}/ovn_k8s.conf"
       dest: C:\Program Files\Cloudbase Solutions\Open vSwitch\conf\ovn_k8s.conf
       force: yes
  - name: copy ovn-k8s-cni-overlay.exe
    win_copy:
       src: /root/ovn-kubernetes/go-controller/_output/go/windows/ovn-k8s-cni-overlay.exe
       dest: /bin/ovn-k8s-cni-overlay.exe
       force: yes
  - name: copy ovn ovnkube.exe
    win_copy:
       src: /root/ovn-kubernetes/go-controller/_output/go/windows/ovnkube.exe
       dest: /bin/ovnkube.exe
       force: yes
- hosts: windows
  gather_facts: no
  tasks:
  - name: Add port 10250 to windows firewall rules
    win_shell: New-NetFirewallRule -Name kubelet -DisplayName 'Kubernetes Node' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 10250
    ignore_errors: yes
  - name: Add port 6081 to windows firewall rules
    win_shell: New-NetFirewallRule -Name ovn.6081 -DisplayName 'ovn.6081' -Enabled True -Direction Inbound -Protocol UDP -Action Allow -LocalPort 6081
    ignore_errors: yes
  - name: Install NSSM
    win_shell: choco install nssm -y
    ignore_errors: yes
# Part 2
- hosts: winnode01
  gather_facts: no
  tasks:
  - name: Setup Kubeovn Service
    win_shell: setup_kubeovn_service.ps1
    args:
      chdir: \k\hybrid\bin
  - name: Setup Kubelet Service
    win_shell: setup_kubelet_service.ps1
    args:
      chdir: \k\hybrid\bin
  - name: Enable kubeovn
    win_shell: Set-Service kubeovn -StartupType Automatic
  - name: Start kubeovn
    win_shell: Start-Service kubeovn
  - name: Enable kubelet
    win_shell: Set-Service kubelet -StartupType Automatic
  - name: Start kubelet
    win_shell: Start-Service kubelet
#Part 3
- hosts: winnode01
  gather_facts: no
  tasks:
  - name: Setup Kubeovn Service
    win_shell: setup_kubeovn_service.ps1
    args:
      chdir: \k\hybrid\bin
  - name: Setup Kubelet Service
    win_shell: setup_kubelet_service.ps1
    args:
      chdir: \k\hybrid\bin
  - name: Enable kubeovn
    win_shell: Set-Service kubeovn -StartupType Automatic
  - name: Start kubeovn
    win_shell: Start-Service kubeovn
  - name: Enable kubelet
    win_shell: Set-Service kubelet -StartupType Automatic
  - name: Start kubelet
    win_shell: Start-Service kubelet
